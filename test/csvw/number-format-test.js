/* eslint-env mocha */

const expect = require('chai').expect

const CsvlintCsvwNumberformat = require('../../lib/csvlint/csvw/number-format')

describe('Csvlint::Csvw::NumberFormat', () => {

  it("should correctly parse #,##0.##", () => {
    const format =CsvlintCsvwNumberFormat("#,##0.##")
    expect(format.pattern).to.eql("#,##0.##")
    expect(format.prefix).to.eql("")
    expect(format.numeric_part).to.eql("#,##0.##")
    expect(format.suffix).to.eql("")
    expect(format.grouping_separator).to.eql(",")
    expect(format.decimal_separator).to.eql(".")
    expect(format.primary_grouping_size).to.eql(3)
    expect(format.secondary_grouping_size).to.eql(3)
    expect(format.fractional_grouping_size).to.eql(0)
  })

  it("should correctly parse ###0.#####", () => {
    const format =CsvlintCsvwNumberFormat("###0.#####")
    expect(format.primary_grouping_size).to.eql(0)
    expect(format.secondary_grouping_size).to.eql(0)
    expect(format.fractional_grouping_size).to.eql(0)
  })

  it("should correctly parse ###0.0000#", () => {
    const format =CsvlintCsvwNumberFormat("###0.0000#")
    expect(format.primary_grouping_size).to.eql(0)
    expect(format.secondary_grouping_size).to.eql(0)
    expect(format.fractional_grouping_size).to.eql(0)
  })

  it("should correctly parse #,##,###,####", () => {
    const format =CsvlintCsvwNumberFormat("#,##,###,####")
    expect(format.primary_grouping_size).to.eql(4)
    expect(format.secondary_grouping_size).to.eql(3)
    expect(format.fractional_grouping_size).to.eql(0)
  })

  it("should correctly parse #,##0.###,#", () => {
    const format =CsvlintCsvwNumberFormat("#,##0.###,#")
    expect(format.primary_grouping_size).to.eql(3)
    expect(format.secondary_grouping_size).to.eql(3)
    expect(format.fractional_grouping_size).to.eql(3)
  })

  it("should correctly parse #0.###E#0", () => {
    const format =CsvlintCsvwNumberFormat("#0.###E#0")
    expect(format.prefix).to.eql("")
    expect(format.numeric_part).to.eql("#0.###E#0")
    expect(format.suffix).to.eql("")
  })

  it("should match numbers that match ##0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("##0")
    expect(format.match("1")).to.eql(true)
    expect(format.match("12")).to.eql(true)
    expect(format.match("123")).to.eql(true)
    expect(format.match("1234")).to.eql(true)
    expect(format.match("1,234")).to.eql(false)
    expect(format.match("123.4")).to.eql(false)
  })

  it("should match numbers that match #,#00 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,#00")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12")).to.eql(true)
    expect(format.match("123")).to.eql(true)
    expect(format.match("1234")).to.eql(false)
    expect(format.match("1,234")).to.eql(true)
    expect(format.match("1,234,568")).to.eql(true)
    expect(format.match("12,34,568")).to.eql(false)
    expect(format.match("12,34")).to.eql(false)
    expect(format.match("123.4")).to.eql(false)
  })

  it("should match numbers that match #,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,000")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12")).to.eql(false)
    expect(format.match("123")).to.eql(true)
    expect(format.match("1234")).to.eql(false)
    expect(format.match("1,234")).to.eql(true)
    expect(format.match("1,234,568")).to.eql(true)
    expect(format.match("12,34,568")).to.eql(false)
    expect(format.match("12,34")).to.eql(false)
    expect(format.match("123.4")).to.eql(false)
  })

  it("should match numbers that match #,##,#00 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,##,#00")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12")).to.eql(true)
    expect(format.match("123")).to.eql(true)
    expect(format.match("1234")).to.eql(false)
    expect(format.match("1,234")).to.eql(true)
    expect(format.match("1,234,568")).to.eql(false)
    expect(format.match("12,34,568")).to.eql(true)
    expect(format.match("12,34")).to.eql(false)
    expect(format.match("123.4")).to.eql(false)
  })

  it("should match numbers that match #0.# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.#")
    expect(format.match("1")).to.eql(true)
    expect(format.match("12")).to.eql(true)
    expect(format.match("12.3")).to.eql(true)
    expect(format.match("12.34")).to.eql(false)
    expect(format.match("1234.5")).to.eql(true)
    expect(format.match("1,234.5")).to.eql(false)
  })

  it("should match numbers that match #0.0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12")).to.eql(false)
    expect(format.match("12.3")).to.eql(true)
    expect(format.match("12.34")).to.eql(false)
    expect(format.match("1234.5")).to.eql(true)
    expect(format.match("1,234.5")).to.eql(false)
  })

  it("should match numbers that match #0.0# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0#")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12")).to.eql(false)
    expect(format.match("12.3")).to.eql(true)
    expect(format.match("12.34")).to.eql(true)
    expect(format.match("12.345")).to.eql(false)
  })

  it("should match numbers that match #0.0#,# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0#,#")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12.3")).to.eql(true)
    expect(format.match("12.34")).to.eql(true)
    expect(format.match("12.345")).to.eql(false)
    expect(format.match("12.34,5")).to.eql(true)
    expect(format.match("12.34,56")).to.eql(false)
    expect(format.match("12.34,567")).to.eql(false)
    expect(format.match("12.34,56,7")).to.eql(false)
  })

  it("should match numbers that match #0.###E#0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.###E#0")
    expect(format.match("1")).to.eql(false)
    expect(format.match("12.3")).to.eql(false)
    expect(format.match("12.34")).to.eql(false)
    expect(format.match("12.3E4")).to.eql(true)
    expect(format.match("12.3E45")).to.eql(true)
    expect(format.match("12.34E5")).to.eql(true)
  })

  it("should parse numbers that match ##0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("##0")
    expect(format.parse("-1")).to.eql(-1)
    expect(format.parse("1")).to.eql(1)
    expect(format.parse("12")).to.eql(12)
    expect(format.parse("123")).to.eql(123)
    expect(format.parse("1234")).to.eql(1234)
    expect(format.parse("1,234")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #,#00 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,#00")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(12)
    expect(format.parse("123")).to.eql(123)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(1234)
    expect(format.parse("1,234,568")).to.eql(1234568)
    expect(format.parse("12,34,568")).to.eql(null)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,000")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("123")).to.eql(123)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(1234)
    expect(format.parse("1,234,568")).to.eql(1234568)
    expect(format.parse("12,34,568")).to.eql(null)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #0,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0,000")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("123")).to.eql(null)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(1234)
    expect(format.parse("1,234,568")).to.eql(1234568)
    expect(format.parse("12,34,568")).to.eql(null)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #,##,#00 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,##,#00")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(12)
    expect(format.parse("123")).to.eql(123)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(1234)
    expect(format.parse("12,345")).to.eql(12345)
    expect(format.parse("1,234,568")).to.eql(null)
    expect(format.parse("12,34,568")).to.eql(1234568)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #,00,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#,00,000")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("123")).to.eql(null)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(null)
    expect(format.parse("12,345")).to.eql(12345)
    expect(format.parse("1,234,568")).to.eql(null)
    expect(format.parse("1,34,568")).to.eql(134568)
    expect(format.parse("12,34,568")).to.eql(1234568)
    expect(format.parse("1,23,45,678")).to.eql(12345678)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match 0,00,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("0,00,000")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("123")).to.eql(null)
    expect(format.parse("1234")).to.eql(null)
    expect(format.parse("1,234")).to.eql(null)
    expect(format.parse("12,345")).to.eql(null)
    expect(format.parse("1,234,568")).to.eql(null)
    expect(format.parse("1,34,568")).to.eql(134568)
    expect(format.parse("12,34,568")).to.eql(1234568)
    expect(format.parse("1,23,45,678")).to.eql(12345678)
    expect(format.parse("12,34")).to.eql(null)
    expect(format.parse("123.4")).to.eql(null)
  })

  it("should parse numbers that match #0.# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.#")
    expect(format.parse("1")).to.eql(1.0)
    expect(format.parse("12")).to.eql(12.0)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("1234.5")).to.eql(1234.5)
    expect(format.parse("1,234.5")).to.eql(null)
  })

  it("should parse numbers that match #0.0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("1234.5")).to.eql(1234.5)
    expect(format.parse("1,234.5")).to.eql(null)
  })

  it("should parse numbers that match #0.0# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0#")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12")).to.eql(null)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.345")).to.eql(null)
  })

  it("should parse numbers that match #0.0#,# correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.0#,#")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.345")).to.eql(null)
    expect(format.parse("12.34,5")).to.eql(12.345)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.34,567")).to.eql(null)
    expect(format.parse("12.34,56,7")).to.eql(null)
  })

  it("should parse numbers that match 0.0##,### correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.0##,###")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.345")).to.eql(12.345)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(12.3456)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(12.34567)
    expect(format.parse("12.345,678")).to.eql(12.345678)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match 0.###,### correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.###,###")
    expect(format.parse("1")).to.eql(1)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.345")).to.eql(12.345)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(12.3456)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(12.34567)
    expect(format.parse("12.345,678")).to.eql(12.345678)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match 0.000,### correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.000,###")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(null)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("12.345")).to.eql(12.345)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(12.3456)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(12.34567)
    expect(format.parse("12.345,678")).to.eql(12.345678)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match 0.000,0# correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.000,0#")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(null)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("12.345")).to.eql(null)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(12.3456)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(12.34567)
    expect(format.parse("12.345,678")).to.eql(null)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match 0.000,0## correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.000,0##")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(null)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("12.345")).to.eql(null)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(12.3456)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(12.34567)
    expect(format.parse("12.345,678")).to.eql(12.345678)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match 0.000,000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("0.000,000")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(null)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("12.345")).to.eql(null)
    expect(format.parse("12.3456")).to.eql(null)
    expect(format.parse("12.345,6")).to.eql(null)
    expect(format.parse("12.34,56")).to.eql(null)
    expect(format.parse("12.345,67")).to.eql(null)
    expect(format.parse("12.345,678")).to.eql(12.345678)
    expect(format.parse("12.345,67,8")).to.eql(null)
  })

  it("should parse numbers that match #0.###E#0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("#0.###E#0")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("12.3")).to.eql(null)
    expect(format.parse("12.34")).to.eql(null)
    expect(format.parse("12.3E4")).to.eql(12.3E4)
    expect(format.parse("12.3E45")).to.eql(12.3E45)
    expect(format.parse("12.34E5")).to.eql(12.34E5)
  })

  it("should parse numbers that match %000 correctly", () => {
    const format =CsvlintCsvwNumberFormat("%000")
    expect(format.parse("%001")).to.eql(0.01)
    expect(format.parse("%012")).to.eql(0.12)
    expect(format.parse("%123")).to.eql(1.23)
    expect(format.parse("%1234")).to.eql(12.34)
  })

  it("should parse numbers that match -0 correctly", () => {
    const format =CsvlintCsvwNumberFormat("-0")
    expect(format.parse("1")).to.eql(null)
    expect(format.parse("-1")).to.eql(-1)
    expect(format.parse("-12")).to.eql(-12)
  })

  it("should parse numbers normally when there is no pattern", () => {
    const format =CsvlintCsvwNumberFormat()
    expect(format.parse("1")).to.eql(1)
    expect(format.parse("-1")).to.eql(-1)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.3E4")).to.eql(12.3E4)
    expect(format.parse("12.3E45")).to.eql(12.3E45)
    expect(format.parse("12.34E5")).to.eql(12.34E5)
    expect(format.parse("12.34e5")).to.eql(12.34E5)
    expect(format.parse("-12.34")).to.eql(-12.34)
    expect(format.parse("1,234")).to.eql(null)
    expect(format.parse("NaN")).to.be.NaN
    expect(format.parse("INF")).to.eql(Infinity)
    expect(format.parse("-INF")).to.eql(-Infinity)
    expect(format.parse("123456.789F10")).to.eql(null)
  })

  it("should parse numbers including grouping separators when they are specified", () => {
    const format =CsvlintCsvwNumberFormat(null, ",")
    expect(format.parse("1")).to.eql(1)
    expect(format.parse("12.3")).to.eql(12.3)
    expect(format.parse("12.34")).to.eql(12.34)
    expect(format.parse("12.3E4")).to.eql(12.3E4)
    expect(format.parse("12.3E45")).to.eql(12.3E45)
    expect(format.parse("12.34E5")).to.eql(12.34E5)
    expect(format.parse("1,234")).to.eql(1234)
    expect(format.parse("1,234,567")).to.eql(1234567)
    expect(format.parse("1,,234")).to.eql(null)
    expect(format.parse("NaN")).to.be.NaN
    expect(format.parse("INF")).to.eql(Infinity)
    expect(format.parse("-INF")).to.eql(-Infinity)
  })

  it("should parse numbers including decimal separators when they are specified", () => {
    const format =CsvlintCsvwNumberFormat(null, " ", ",")
    expect(format.parse("1")).to.eql(1)
    expect(format.parse("12,3")).to.eql(12.3)
    expect(format.parse("12,34")).to.eql(12.34)
    expect(format.parse("12,3E4")).to.eql(12.3E4)
    expect(format.parse("12,3E45")).to.eql(12.3E45)
    expect(format.parse("12,34E5")).to.eql(12.34E5)
    expect(format.parse("1 234")).to.eql(1234)
    expect(format.parse("1 234 567")).to.eql(1234567)
    expect(format.parse("1  234")).to.eql(null)
  })

})
